package com.bj;

import java.io.*;
import java.util.*;

public class Main_BJ_14890_경사로_김주은 {

	public static void main(String[] args) throws Exception{

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		int N = Integer.parseInt(st.nextToken());
		int L = Integer.parseInt(st.nextToken());
		
		int[][] map = new int[N][N];
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		int answer = 2*N;
		
		//가로로 확인
		for(int i=0;i<N;i++) {
			boolean[] exist = new boolean[N];
	A:		for(int j=0;j<N;j++) {				
				if(j-1>=0 && map[i][j]>map[i][j-1]) { //왼쪽에 경사로가 필요한 상황 중
					if(j-L>=0 && map[i][j]==map[i][j-1]+1) { //왼쪽으로 경사로를 놓을 길이, 높이도 만족할 때
						boolean canPut = true;
						for(int l=1;l<=L;l++) { //경사로를 놓을 수 없는지 판단
							if(map[i][j]-1 != map[i][j-l] || exist[j-l]) {
								canPut=false;
							}
						}
						if(canPut) { //경사로를 놓을 수 있다면 놓는다
							for(int l=1;l<=L;l++) {
								exist[j-l]=true;
							}
						} else { //경사로를 놓을 수 없다면 갯수 감소
							--answer;
							break A;
						}
					} else { //왼쪽으로 경사로를 놓을 길이, 높이가 안맞을 때
						--answer;
						break A;
					}
				}

				if(j+1<N && map[i][j]>map[i][j+1]) { //오른쪽에 경사로가 필요한 상황 중
					if(j+L<N && map[i][j]==map[i][j+1]+1) { //오른쪽으로 경사로를 놓을 길이, 높이도 만족할 때
						boolean canPut = true;
						for(int l=1;l<=L;l++) { //경사로를 놓을 수 없는지 판단
							if(map[i][j]-1 != map[i][j+l] || exist[j+l]) {
								canPut=false;
							}
						}
						if(canPut) { //경사로를 놓을 수 있다면 놓는다
							for(int l=1;l<=L;l++) {
								exist[j+l]=true;
							}
						} else { //경사로를 놓을 수 없다면 갯수 감소
							--answer;
							break A;
						}
					} else { //오른쪽에 경사로를 놓을 길이, 높이가 안맞을 때
						--answer;
						break A;
					}
				}
			}
		}
		
		//세로로 확인
		for(int j=0;j<N;j++) {
			boolean[] exist = new boolean[N];
	A:		for(int i=0;i<N;i++) {				
				if(i-1>=0 && map[i][j]>map[i-1][j]) { //위쪽에 경사로가 필요한 상황 중
					if(i-L>=0 && map[i][j]==map[i-1][j]+1) { //위쪽으로 경사로를 놓을 길이, 높이도 만족할 때
						boolean canPut = true;
						for(int l=1;l<=L;l++) { //경사로를 놓을 수 없는지 판단
							if(map[i][j]-1 != map[i-l][j] || exist[i-l]) {
								canPut=false;
							}
						}
						if(canPut) { //경사로를 놓을 수 있다면 놓는다
							for(int l=1;l<=L;l++) {
								exist[i-l]=true;
							}
						} else { //경사로를 놓을 수 없다면 갯수 감소
							--answer;
							break A;
						}
					} else { //위쪽으로 경사로를 놓을 길이, 높이가 안맞을 때
						--answer;
						break A;
					}
				}

				if(i+1<N && map[i][j]>map[i+1][j]) { //아래쪽에 경사로가 필요한 상황 중
					if(i+L<N && map[i][j]==map[i+1][j]+1) { //아래쪽으로 경사로를 놓을 길이, 높이도 만족할 때
						boolean canPut = true;
						for(int l=1;l<=L;l++) { //경사로를 놓을 수 없는지 판단
							if(map[i][j]-1 != map[i+l][j] || exist[i+l]) {
								canPut=false;
							}
						}
						if(canPut) { //경사로를 놓을 수 있다면 놓는다
							for(int l=1;l<=L;l++) {
								exist[i+l]=true;
							}
						} else { //경사로를 놓을 수 없다면 갯수 감소
							--answer;
							break A;
						}
					} else { //아래쪽에 경사로를 놓을 길이, 높이가 안맞을 때
						--answer;
						break A;
					}
				}
			}
		}
		
		System.out.println(answer);
	}

}
